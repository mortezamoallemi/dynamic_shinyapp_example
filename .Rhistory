Gravity_Bus = mean(Gravity_Bus),
Gravity_equal_weight = mean(Gravity_equal_weight),
Gravity_pca_weight = mean(Gravity_pca_weight),
Gravity_Hospital_All = mean(Gravity_Hospital_All),
Gravity_Green = mean(Gravity_Green),
.groups = "drop") %>%
mutate(Elders = as.character(Elders)) %>%
bind_rows(data.frame(Elders = "Mann-Withney Test",
N = 0,
Gravity_equal_weight = wilcox.test(data_use$Gravity_equal_weight[data_use$Elders == 0],
data_use$Gravity_equal_weight[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_pca_weight = wilcox.test(data_use$Gravity_pca_weight[data_use$Elders == 0],
data_use$Gravity_pca_weight[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Train = wilcox.test(data_use$Gravity_Train[data_use$Elders == 0],
data_use$Gravity_Train[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Tram = wilcox.test(data_use$Gravity_Tram[data_use$Elders == 0],
data_use$Gravity_Tram[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Bus = wilcox.test(data_use$Gravity_Bus[data_use$Elders == 0],
data_use$Gravity_Bus[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Hospital_All = wilcox.test(data_use$Gravity_Hospital_All[data_use$Elders == 0],
data_use$Gravity_Hospital_All[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Green = wilcox.test(data_use$Gravity_Green[data_use$Elders == 0],
data_use$Gravity_Green[data_use$Elders == 1],
alternative = "g")$p.value)) %>%
rename(`Train Index` = Gravity_Train,
`Tram Index` = Gravity_Tram,
`Bus Index` = Gravity_Bus,
`PT Index (Equal-Weight)` = Gravity_equal_weight,
`PT Index (PCA-Weight)` = Gravity_pca_weight,
`Healthcare Index` = Gravity_Hospital_All,
`UGS Index` = Gravity_Green) %>%
mutate(Elders = ifelse(Elders == "0", "Low Elderly Suburbs", ifelse(Elders == "1", "High Elderly Suburbs", Elders)))
data_use <-
data_use %>%
t() %>%
as.data.frame() %>%
janitor::row_to_names(row_number = 1)
data_use %>%
kable()
data_use %>%
as.matrix() %>%
stargazer(digits = 3)
result_lisa <- read.csv("2. Data and Model/Working/lisa_patterns_PT and Elders - PCA_.csv")
data_use <-
data_access_sa2 %>%
# mutate(Elders = ifelse(elders_percent >= mean(elders_percent), 1, 0))
mutate(Elders = ifelse(result_lisa$x == TRUE, 1,
ifelse(result_lisa$x == FALSE, 0, NA))) %>%
filter(!is.na(Elders))
data_use <-
data_use %>%
group_by(Elders) %>%
summarise(N = n(),
Gravity_Train = median(Gravity_Train),
Gravity_Tram = median(Gravity_Tram),
Gravity_Bus = median(Gravity_Bus),
Gravity_equal_weight = median(Gravity_equal_weight),
Gravity_pca_weight = median(Gravity_pca_weight),
Gravity_Hospital_All = median(Gravity_Hospital_All),
Gravity_Green = median(Gravity_Green),
.groups = "drop") %>%
mutate(Elders = as.character(Elders)) %>%
bind_rows(data.frame(Elders = "Mann-Withney Test",
N = 0,
Gravity_equal_weight = wilcox.test(data_use$Gravity_equal_weight[data_use$Elders == 0],
data_use$Gravity_equal_weight[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_pca_weight = wilcox.test(data_use$Gravity_pca_weight[data_use$Elders == 0],
data_use$Gravity_pca_weight[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Train = wilcox.test(data_use$Gravity_Train[data_use$Elders == 0],
data_use$Gravity_Train[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Tram = wilcox.test(data_use$Gravity_Tram[data_use$Elders == 0],
data_use$Gravity_Tram[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Bus = wilcox.test(data_use$Gravity_Bus[data_use$Elders == 0],
data_use$Gravity_Bus[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Hospital_All = wilcox.test(data_use$Gravity_Hospital_All[data_use$Elders == 0],
data_use$Gravity_Hospital_All[data_use$Elders == 1],
alternative = "g")$p.value,
Gravity_Green = wilcox.test(data_use$Gravity_Green[data_use$Elders == 0],
data_use$Gravity_Green[data_use$Elders == 1],
alternative = "g")$p.value)) %>%
rename(`Train Index` = Gravity_Train,
`Tram Index` = Gravity_Tram,
`Bus Index` = Gravity_Bus,
`PT Index (Equal-Weight)` = Gravity_equal_weight,
`PT Index (PCA-Weight)` = Gravity_pca_weight,
`Healthcare Index` = Gravity_Hospital_All,
`UGS Index` = Gravity_Green) %>%
mutate(Elders = ifelse(Elders == "0", "Low Elderly Suburbs", ifelse(Elders == "1", "High Elderly Suburbs", Elders)))
data_use <-
data_use %>%
t() %>%
as.data.frame() %>%
janitor::row_to_names(row_number = 1) %>%
mutate(`Low Elderly Suburbs` = `Low Elderly Suburbs` %>% as.numeric() %>% round(3),
`High Elderly Suburbs` = `High Elderly Suburbs` %>% as.numeric() %>% round(3),
`Mann-Withney Test` = `Mann-Withney Test` %>% as.numeric() %>% round(3))
data_use %>%
kable()
knitr::opts_chunk$set(echo = TRUE)
{
library(dplyr)
library(tidyverse)
library(DT)
library(plotly)
library(knitr)
library(stargazer)
library(ggplot2)
library(rgdal)
library(rgeos)
library(leaflet)
library(lfe)
library(foreign) # working with spss files
library(plm) # For Panel Data Regression
library(sandwich) # For Clustering Errors
library(broom) #for glance() and tidy()
library(lmtest)
library(sf)
}
set.seed(100)
rm(list = ls())
data <- read.csv("2. Data and Model/Working/hilda_melbourne.csv")
# data_access <- read.csv("2. Data and Model/Working/data_pt_access_and_population.csv")
data_gravity <- read.csv("2. Data and Model/Working/PT_Gravity.csv")
data_elders <- read.csv("2. Data and Model/Working/data_elders.csv")
map_sa2 <- readOGR(dsn = "2. Data and Model/Data/SA2_2021_AUST_SHP_GDA2020",
layer = "SA2_2021_AUST_GDA2020")
data_access_sa2 <- data_gravity %>%
left_join(data_elders,
by = c("SA2_CODE21" = "SA2"))
map_sa2 <- map_sa2[map_sa2$SA2_CODE21 %in% data_access_sa2$SA2,]
map_sa2@data <- map_sa2@data %>%
mutate(SA2_CODE21 = as.numeric(SA2_CODE21)) %>%
left_join(data_access_sa2, by = c("SA2_CODE21"))
data_use <-
data_access_sa2 %>%
select(population,
population.density,
elders, train.distance, tram.distance, bus.distance,
Gravity_equal_weight, Gravity_pca_weight,
Gravity_Hospital_All, Gravity_Green) %>%
mutate(population = population/1000,
elders = elders/1000) %>%
rename(`Total Population (*1000)` = population,
`Elders (*1000)` = elders ,
`Population Density (*1000 per km2)` = population.density,
`Train Distance (km)` = train.distance,
`Tram Distance (km)` = tram.distance,
`Bus Distance (km)` = bus.distance,
`PT Index (Equal Weight)` = Gravity_equal_weight,
`PT Index (PCA Weight)` = Gravity_pca_weight,
`Healthcare Index` = Gravity_Hospital_All,
`UGS Index` = Gravity_Green
)
descriptive.summary <- data.frame(Mean = colMeans(data_use, na.rm = TRUE),
"Std.Dev." = apply(data_use, 2, function(x) sd(x,na.rm = TRUE)),
Min = apply(data_use, 2, function(x) min(x,na.rm = TRUE)),
Q1 = apply(data_use, 2, function(x) quantile(as.numeric(x),probs = 0.25,na.rm = TRUE)),
Median = apply(data_use, 2, function(x) quantile(as.numeric(x),probs = 0.50,na.rm = TRUE)),
Q3 = apply(data_use, 2, function(x) quantile(as.numeric(x),probs = 0.75,na.rm = TRUE)),
Max = apply(data_use, 2, function(x) max(x,na.rm = TRUE)))
descriptive.summary %>%
kable()
descriptive.summary %>% as.matrix() %>% stargazer()
load("2. Data and Model/Working/pca.RData")
(summary(pca))$importance %>%
kable()
(summary(pca))$importance %>% as.matrix() %>% stargazer()
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.001) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg")
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg")
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.001) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave(plot, "2. Data and Model/Results/Map_Train_Distance.jpg")
?ggsave
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.001) +
scale_fill_gradient(low = "#0571b0"
, high="black"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.001) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.01) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.1) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 1) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.1) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
plot <-
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.2) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg",
plot)
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=train.distance),
color="black",
size = 0.2) +
scale_fill_gradient(low = "#0571b0"
, high="white"
, name="Train Distance (km)"
, limits = c(0,quantile(map_sa2$train.distance, .95))
, na.value = 'white'
, labels = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
, breaks = quantile(map_sa2$train.distance,
probs = seq(.1, .9, .4),
na.rm = T) %>% round(2)
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Train_Distance.jpg")
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=population.density),
color="black",
size = 0.2) +
scale_fill_gradient(low = "white"
, high="#0571b0"
, name="*1000/sqkm"
, limits = c(quantile(map_sa2$population.density, 0)
, quantile(map_sa2$population.density, .8))
, na.value = '#0571b0'
, labels = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
, breaks = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Population_Desnsity.jpg")
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=population.density),
color="black",
size = 0.2) +
scale_fill_gradient(low = "white"
, high="#0571b0"
, name="*1000/sqkm"
, limits = c(quantile(map_sa2$population.density, 0)
, quantile(map_sa2$population.density, .8))
, na.value = '#0571b0'
, labels = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
, breaks = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Population_Desnsity.jpg")
ggplot() +
geom_sf(data=st_as_sf(map_sa2),
aes(fill=population.density),
color="black",
size = 0.2) +
scale_fill_gradient(low = "white"
, high="#0571b0"
, name=""
, limits = c(quantile(map_sa2$population.density, 0)
, quantile(map_sa2$population.density, .8))
, na.value = '#0571b0'
, labels = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
, breaks = quantile(map_sa2$population.density,
probs = seq(.1, .9, .4),
na.rm = T) %>% round()
) +
theme_bw()
ggsave("2. Data and Model/Results/Map_Population_Desnsity.jpg")
usethis::use_github_action("check-release")
renv::init()
renv::init()
renv::init(force = TRUE)
rm(list = ls())
renv::init(force = TRUE)
?renv::init
myfile <- "https://raw.github.com/sebastiansauer/Daten_Unterricht/master/Affairs.csv"
Affairs <- read_csv(myfile)
Affairs <- read.csv(myfile)
View(Affairs)
shiny::runApp('C:/Users/fsharifi/OneDrive/OneDrive - Swinburne University/Morteza/GitHub/shinyapp_autoupdate')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
menu = paste0(modulessource, "menu.R")
# Modules Within App Directory
modulessource <- c("https://github.com/mortezamoallemi/shinyapp_autoupdate/blob/main/")
menu = paste0(modulessource, "menu.R")
menu
source(menu, local = TRUE)
source_url(menu, local = TRUE)
devtools::source_url(menu, local = TRUE)
install.packages("devtools")
devtools::source_url(menu, local = TRUE)
runApp()
devtools::source_url(menu, local = TRUE)
devtools::source_url(menu)
menu = paste0(modulessource, "report_1.R")
if (file.exists(menu)) {
devtools::source_url(menu, local = TRUE)
}
devtools::source_url(menu, local = TRUE)
?devtools::source_url
menu = paste0(modulessource, "menu.R")
devtools::source_url(menu, local = TRUE, sha1 = "235b53")
# Modules Within App Directory
modulessource <- c("https://raw.githubusercontent.com/mortezamoallemi/shinyapp_autoupdate/main/")
devtools::source_url(menu, local = TRUE)
menu = paste0(modulessource, "menu.R")
source(menu, local = TRUE)
(file.exists(menu))
install.packages("RCurl")
RCurl::url.exists(menu)
runApp()
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyjs)
library(shinycssloaders)
library(urltools)
library(tidyverse)
library(RCurl)
?menuItem
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
3+4
3+4
